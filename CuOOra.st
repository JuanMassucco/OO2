TestCase subclass: #TestAnswer	instanceVariableNames: 'u1 u2 u3 aQuestion aQuestion2 aTopicCollection anAnswer anAnswer2 anAnswer3'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Test'!!TestAnswer methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:47'!testRemoveValoration	self addQuestion.	self addAnswer.	self addValoration.	self assert: anAnswer3 valorations size equals: 2.	anAnswer3 removeValoration: anAnswer3 valorations first.	self assert: anAnswer3 valorations size equals: 1.	self assert: anAnswer3 valorations last valoration equals: false! !!TestAnswer methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:49'!addScorePositive	anAnswer like:u3.	anAnswer like:u1.! !!TestAnswer methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:50'!testScore	self addQuestion.	self addAnswer.	self assert: anAnswer score equals: 0.	self addScorePositive.	self assert: anAnswer score equals: 2.	self addScoreNegative.	self assert: anAnswer score equals: -2! !!TestAnswer methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:45'!testAddValoration	self addQuestion.	self addAnswer.	self assert: anAnswer valorations size equals: 0.	anAnswer addValoration: (Valoration newValoration: true withCreator: u3).	self assert: anAnswer valorations size equals: 1.	self assert: anAnswer valorations first valoration equals: true! !!TestAnswer methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:34'!testLikeAndAmountOfLikes	self addQuestion.	self assert: aQuestion amountOfLikes equals: 0.	aQuestion like: u2.	aQuestion like: u3.	self assert: aQuestion amountOfLikes equals: 2.	aQuestion like: u3.	self assert: aQuestion amountOfLikes equals: 2.	self assert: aQuestion valorations first valoration equals: true! !!TestAnswer methodsFor: 'running' stamp: 'Diego 5/15/2020 16:02'!addQuestion	aQuestion  := Question		newQuestionWithTitle: '¬¨¬®‚àö‚àèPara qu‚Äö√†√∂¬¨¬© sirve el m‚Äö√†√∂¬¨¬©todo SetUp?'		withContent: 'anContent'		withTopics: aTopicCollection		withCreator: u1.	aQuestion2  := Question		newQuestionWithTitle: 'que es un buen dise‚àö¬±o de de objetos?'		withContent: 'anContent'		withTopics: aTopicCollection		withCreator: u2! !!TestAnswer methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:49'!addScoreNegative	anAnswer disLike: u3.	anAnswer disLike: u1.! !!TestAnswer methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:47'!addValoration	anAnswer3 like: u3.	anAnswer3 disLike: u2! !!TestAnswer methodsFor: 'running' stamp: 'Diego 5/15/2020 15:46'!setUp	self addUser.	self addTopics.! !!TestAnswer methodsFor: 'running' stamp: 'juanmassucco 5/15/2020 19:01'!addAnsweranAnswer:=Answer		newAnswerfor: aQuestion2 		withContent:			'Sirve para instanciar los objetos queson evaluados por el test en un unico metodo y que seejecute siempre antes de cada test.'		withCreator: u2. 		anAnswer2:= Answer		newAnswerfor: aQuestion		withContent:			'Sirve para instanciar.'		withCreator: u3. 			anAnswer3:=Answer		newAnswerfor: aQuestion2 		withContent:			'Se debe utulizar......'		withCreator: u1.! !!TestAnswer methodsFor: 'running' stamp: 'Diego 5/15/2020 15:45'!addTopics	aTopicCollection := OrderedCollection new.	aTopicCollection		add: (Topic newTopicWithName: 'OO1' withDescription: 'aDescription');		add: (Topic newTopicWithName: 'Test de unidad' withDescription: 'aDescription')! !!TestAnswer methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:34'!testDisLikeAndAmountOfDisLikes	self addQuestion.	self assert: aQuestion amountOfDisLikes equals: 0.	aQuestion disLike: u2.	aQuestion disLike: u3.	self assert: aQuestion amountOfDisLikes equals: 2.	aQuestion disLike: u3.	self assert: aQuestion amountOfDisLikes equals: 2.	self assert: aQuestion valorations first valoration equals: false! !!TestAnswer methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:35'!testRemove	self addQuestion.	self addAnswer.	self assert: aQuestion2 answers size equals: 2.	self assert: u2 answers size equals: 1.	anAnswer remove.	self assert: aQuestion2 answers size equals: 1.	self assert: aQuestion2 answers first content equals: 'Se debe utulizar......'.	self assert: u2 answers size equals: 0! !!TestAnswer methodsFor: 'running' stamp: 'Diego 5/15/2020 15:44'!addUser	u1:=User newUserNick: 'diego' withMail:'diego@cuoora.com'  withPassword:'diego@cuoora.com'.	u2:=User newUserNick: 'juan' withMail:'juan@cuoora.com'  withPassword:'juan@cuoora.com'.	u3:=User newUserNick: 'pepe' withMail:'pepe@cuoora.com'  withPassword:'pepe@cuoora.com'.! !TestCase subclass: #TestCuoora	instanceVariableNames: 'cuoora question1 question2 u1 u2 u3 topicCollect'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Test'!!TestCuoora methodsFor: 'setup' stamp: 'juanmassucco 5/17/2020 13:35'!setUp	cuoora := CuOOra new.	u1 := User newUserNick: 'Pedro' withMail: 'pedro@cuoora.com' withPassword: 'pedro@cuoora.com'.	cuoora addUser: u1.	u2 := User newUserNick: 'Diego' withMail: 'diego@cuoora.com' withPassword: 'diego@cuoora.com'.	cuoora addUser: u2.	u3 := User newUserNick: 'Juan' withMail: 'juan@cuoora.com' withPassword: 'juan@cuoora.com'.	cuoora addUser: u3.	topicCollect := OrderedCollection new.	topicCollect add: 'OO1'.	topicCollect add: 'Test de unidad'.	question1 := cuoora		addQuestionWithTitle: 'Para que sirve el metodo SetUp?'		withContent: 'anContent'		withTopics: topicCollect		withCreator: u1.	Answer		newAnswerfor: question1		withContent:			'Sirve para instanciar los objetos queson evaluados por el test en un ‚unico metodo y que seejecute siempre antes de cada test.'		withCreator: u2.	topicCollect := OrderedCollection new.	topicCollect add: 'OO1'.	topicCollect add: 'Smalltalk'.	question2 := cuoora		addQuestionWithTitle: 'que significa #messageNotUnderstood?'		withContent: 'anContent'		withTopics: topicCollect		withCreator: u2.	Answer		newAnswerfor: question2		withContent:			'Significa que el objeto que recibio elmensaje no encontro ningun m‚etodo para ejecutar enrespuesta.'		withCreator: u1! !!TestCuoora methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 13:35'!testUserValidation	self assert: (cuoora userValidation: 'roberto@cuoora.com' password: 'roberto@cuoora.com') equals: nil.	self assert: (cuoora userValidation: 'pedro@cuoora.com' password: 'roberto@cuoora.com') equals: nil.	self assert: (cuoora userValidation: 'roberto@cuoora.com' password: 'pedro@cuoora.com') equals: nil.	self assert: (cuoora userValidation: 'pedro@cuoora.com' password: 'pedro@cuoora.com') equals: u1! !!TestCuoora methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 13:35'!testAddTopics	self assert: cuoora topics size equals: 3.	self assert: cuoora topics first name equals: 'OO1'.	self addQuestion2.	self assert: cuoora topics size equals: 6.	self assert: cuoora topics last name equals: 'diseño de clases'! !!TestCuoora methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 13:34'!testReturnQuestionsOfInterestForHome	self assert: (cuoora returnQuestionsOfInterestForHome: u3 cant: 5) size equals: 0.	u3 addToTopicsOfInterest: cuoora topics first.	self addQuestion.	self assert: (cuoora returnQuestionsOfInterestForHome: u3 cant: 5) size equals: 3.	u2 addFollowing: u1.	self		assert: (cuoora returnQuestionsOfInterestForHome: u2 cant: 5) first title		equals: 'Para que sirve el metodo SetUp?'! !!TestCuoora methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 13:35'!testAddUser	| u5 u6 |	self assert: cuoora users size equals: 3.	self assert: cuoora users first nick equals: 'Pedro'.	u5 := User newUserNick: 'Santiago' withMail: 'santiago@cuoora.com' withPassword: 'santiago@cuoora.com'.	cuoora addUser: u5.	u6 := User newUserNick: 'Tomas' withMail: 'tomas@cuoora.com' withPassword: 'tomas@cuoora.com'.	cuoora addUser: u6.	self assert: cuoora users size equals: 5.	self assert: cuoora users last nick equals: 'Tomas'! !!TestCuoora methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 14:34'!testAddQuestionWithTitleWithContentWithTopicsWithCreator	| topicsQuestions |	topicsQuestions := OrderedCollection new.	topicsQuestions add: 'OO1'.	topicsQuestions add: 'Prueba'.	self assert: u3 questions size equals: 0.	self assert: cuoora topics size equals: 3.	cuoora		addQuestionWithTitle: 'anTitle'		withContent: 'anDescription'		withTopics: topicsQuestions		withCreator: u3.	self assert: u3 questions size equals: 1.	self assert: u3 questions first topics second name equals: 'Prueba'.	self assert: cuoora topics size equals: 4.! !!TestCuoora methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 13:34'!addQuestion2	topicCollect := OrderedCollection new.	topicCollect add: 'patrones de diseño'.	topicCollect add: 'pharo'.	topicCollect add: 'diseño de clases'.	cuoora		addQuestionWithTitle: 'buenas practicas de objetos?'		withContent: 'anContent'		withTopics: topicCollect		withCreator: u1! !!TestCuoora methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 13:34'!addQuestion3	topicCollect := OrderedCollection new.	topicCollect add: 'ingenieria de software'.	cuoora		addQuestionWithTitle: 'que es la ingenieria de sotware?'		withContent: 'anContent'		withTopics: topicCollect		withCreator: u3! !!TestCuoora methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 13:35'!addQuestion	topicCollect := OrderedCollection new.	topicCollect add: 'OO1'.	cuoora		addQuestionWithTitle: 'Que es un nuevo metodo?'		withContent: 'anContent'		withTopics: topicCollect		withCreator: u2! !TestCase subclass: #TestQuestion	instanceVariableNames: 'u1 u2 u3 aQuestion aQuestion2 aTopicCollection anAnswer anAnswer2 anAnswer3'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Test'!!TestQuestion methodsFor: 'running' stamp: 'Diego 5/17/2020 09:58'!testRemoveValoration   self addQuestion.   self addValorationQuestion.   self assert: ((aQuestion valorations)size ) equals: 2.   aQuestion removeValoration: aQuestion valorations first.   self assert: ((aQuestion valorations)size ) equals: 1.   self assert: ((aQuestion valorations)first valoration ) equals: false.! !!TestQuestion methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:35'!testAddAnswers	self addQuestion.	self assert: aQuestion2 answers size equals: 0.	self addAnswer.	self assert: aQuestion2 answers size equals: 2.	self		assert: aQuestion2 answers first content		equals:			'Los objetos queson evaluados por el test.'! !!TestQuestion methodsFor: 'running' stamp: 'Diego 5/15/2020 17:29'!addValorationQuestion     	aQuestion like:u3.	aQuestion disLike:u2.! !!TestQuestion methodsFor: 'running' stamp: 'Diego 5/17/2020 09:53'!testAddValoration   self addQuestion.   self assert: ((aQuestion valorations)size ) equals: 0.   self addValorationQuestion.   self assert: ((aQuestion valorations)size ) equals: 2.   self assert: ((aQuestion valorations) first valoration ) equals: true.! !!TestQuestion methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:34'!testQuestionRemove	self addQuestion.	self addAnswer.	self assert: u1 questions size equals: 1.	self assert: u3 answers size equals: 1.	aQuestion remove.	self assert: u1 questions size equals: 0.	self assert: u3 answers size equals: 0! !!TestQuestion methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:33'!testLikeAndAmountOfLikes	self addQuestion.	self assert: aQuestion amountOfLikes equals: 0.	aQuestion like: u2.	aQuestion like: u3.	self assert: aQuestion amountOfLikes equals: 2.	aQuestion like: u3.	self assert: aQuestion amountOfLikes equals: 2.	self assert: aQuestion valorations first valoration equals: true! !!TestQuestion methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:34'!addQuestion	aQuestion := Question		newQuestionWithTitle: 'Para que sirve el metodo SetUp?'		withContent: 'anContent'		withTopics: aTopicCollection		withCreator: u1.	aQuestion2 := Question		newQuestionWithTitle: 'que es un buen diseño de de objetos?'		withContent: 'anContent'		withTopics: aTopicCollection		withCreator: u2! !!TestQuestion methodsFor: 'running' stamp: 'Diego 5/15/2020 17:36'!addScore	aQuestion like:u3.	aQuestion like:u2.	aQuestion2 disLike:u1.	aQuestion2 disLike:u3.! !!TestQuestion methodsFor: 'running' stamp: 'Diego 5/15/2020 17:23'!setUp	self addUser.	self addTopics.! !!TestQuestion methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:35'!testAnswersOrderedByScore	self addQuestion.	self addAnswer.	self assert: aQuestion2 answersOrderedByScore first score equals: 0.	self assert: aQuestion2 answersOrderedByScore first content equals: 'Se debe utulizar......'.	self assert: aQuestion2 answersOrderedByScore second score equals: 0.	self		assert: aQuestion2 answersOrderedByScore second content		equals:			'Los objetos queson evaluados por el test.'.	anAnswer like: u2.	self assert: aQuestion2 answersOrderedByScore first score equals: 1.	self		assert: aQuestion2 answersOrderedByScore first content		equals:			'Los objetos queson evaluados por el test.'.	self assert: aQuestion2 answersOrderedByScore second score equals: 0.	self assert: aQuestion2 answersOrderedByScore second content equals: 'Se debe utulizar......'.	anAnswer disLike: u2.	self assert: aQuestion2 answersOrderedByScore first score equals: 0.	self assert: aQuestion2 answersOrderedByScore first content equals: 'Se debe utulizar......'.	self assert: aQuestion2 answersOrderedByScore second score equals: -1.	self		assert: aQuestion2 answersOrderedByScore second content		equals:			'Los objetos queson evaluados por el test.'.! !!TestQuestion methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:35'!addAnswer	anAnswer := Answer		newAnswerfor: aQuestion2		withContent:			'Los objetos queson evaluados por el test.'		withCreator: u2.	anAnswer2 := Answer newAnswerfor: aQuestion withContent: 'Sirve para instanciar.' withCreator: u3.	anAnswer3 := Answer newAnswerfor: aQuestion2 withContent: 'Se debe utulizar......' withCreator: u1! !!TestQuestion methodsFor: 'running' stamp: 'Diego 5/15/2020 17:25'!addTopics	aTopicCollection := OrderedCollection new.	aTopicCollection		add: (Topic newTopicWithName: 'OO1' withDescription: 'aDescription');		add: (Topic newTopicWithName: 'Test de unidad' withDescription: 'aDescription')! !!TestQuestion methodsFor: 'running' stamp: 'Diego 5/15/2020 17:36'!testScore   self addQuestion.   self assert: (aQuestion score ) equals: 0.	self assert: (aQuestion2 score ) equals: 0.   self addScore.	self assert: (aQuestion score ) equals: 2.	self assert: (aQuestion2  score ) equals: -2.! !!TestQuestion methodsFor: 'running' stamp: 'juanmassucco 5/17/2020 13:33'!testDisLikeAndAmountOfDisLikes	self addQuestion.	self assert: aQuestion amountOfDisLikes equals: 0.	aQuestion disLike: u2.	aQuestion disLike: u3.	self assert: aQuestion amountOfDisLikes equals: 2.	aQuestion disLike: u3.	self assert: aQuestion amountOfDisLikes equals: 2.	self assert: aQuestion valorations first valoration equals: false! !!TestQuestion methodsFor: 'running' stamp: 'Diego 5/15/2020 17:23'!addUser	u1:=User newUserNick: 'diego' withMail:'diego@cuoora.com'  withPassword:'diego@cuoora.com'.	u2:=User newUserNick: 'juan' withMail:'juan@cuoora.com'  withPassword:'juan@cuoora.com'.	u3:=User newUserNick: 'pepe' withMail:'pepe@cuoora.com'  withPassword:'pepe@cuoora.com'.! !TestCase subclass: #TestTopic	instanceVariableNames: 'u1 u2 aTopic aTopicCollection aQuestion'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Test'!!TestTopic methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 13:36'!testTopicQuestionAdd	| atopic aux |	aux := SortedCollection new.	atopic := Topic newTopicWithName: 'OO1' withDescription: 'aDescription'.	aux add: atopic.	aQuestion := Question		newQuestionWithTitle: 'Para que sirve el metodo SetUp?'		withContent: 'aContent'		withTopics: aux		withCreator: u1.	self assert: aQuestion topics first equals: atopic.	self assert: atopic questions first equals: aQuestion! !!TestTopic methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 13:36'!testTopicQuestionRemove	self assert: aQuestion topics first equals: aTopic.	self assert: aTopic questions first equals: aQuestion.	aTopic questionRemove: aQuestion.	self assert: aTopic questions size equals: 0! !!TestTopic methodsFor: 'setup' stamp: 'juanmassucco 5/8/2020 10:56'!addUsers	u1 := User newUserNick: 'diego' withMail: 'diego@cuoora.com' withPassword: '1234'.	u2 := User newUserNick: 'juan' withMail: 'juan@cuoora.com' withPassword: '4321'! !!TestTopic methodsFor: 'setup' stamp: 'juanmassucco 5/17/2020 13:36'!setUp	self addUsers.	aTopicCollection := SortedCollection new.	aTopic := Topic newTopicWithName: 'OO1' withDescription: 'aDescription'.	aTopicCollection add: aTopic.	aQuestion :=Question		newQuestionWithTitle: 'Para que sirve el metodo SetUp?'		withContent: 'aContent'		withTopics: aTopicCollection		withCreator: u1.! !TestCase subclass: #TestUser	instanceVariableNames: 'u1 u2 u3 topicCollect cuora question1 question2 question3 aTopicCollection aTopicCollection2 ans1 ans2 ans3'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Test'!!TestUser methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 14:38'!addTopicos3	aTopicCollection2 := OrderedCollection new.	aTopicCollection2		add: (Topic newTopicWithName: 'patrones de diseño' withDescription: 'aDescription');		add: (Topic newTopicWithName: 'objetos1' withDescription: 'aDescription')! !!TestUser methodsFor: 'tests' stamp: 'Diego 5/17/2020 10:27'!testRemoveToTopicsOfInteresself addTopicos.self assert: ((u2 topicsOfInterest) size) equals: 2.u2 removeToTopicsOfInterest: cuora topics first .self assert: ((u2 topicsOfInterest) size) equals: 1.self assert: ((u1 topicsOfInterest) last name) equals: 'OO1'.! !!TestUser methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 14:54'!testAddToTopicsOfInteres	self assert: u2 questionsOfInterest size equals: 0.	self addQuestion.	u2 addToTopicsOfInterest: cuora topics second.	self assert: u2 topicsOfInterest first name equals: 'Test de unidad'.	self assert: u2 topicsOfInterest size equals: 1! !!TestUser methodsFor: 'tests' stamp: 'Diego 5/15/2020 12:15'!addTopicos2	aTopicCollection := OrderedCollection new.	aTopicCollection		add: (Topic newTopicWithName: 'OO1' withDescription: 'aDescription');		add: (Topic newTopicWithName: 'Test de unidad' withDescription: 'aDescription')! !!TestUser methodsFor: 'tests' stamp: 'Diego 5/17/2020 10:06'!sumScore2  	ans3  like:u2.   ans3 like:u3.	ans1 disLike: u1.	ans1 disLike: u3.		! !!TestUser methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 14:40'!addQuestion2  self addTopicos2.	question1  := Question		newQuestionWithTitle: 'Para que sirve el metodo SetUp?'		withContent: 'anContent'		withTopics: aTopicCollection		withCreator: u1.	self addTopicos3.		question2  := Question		newQuestionWithTitle: 'que es un buen diseño de de objetos?'		withContent: 'anContent'		withTopics: aTopicCollection2		withCreator: u2! !!TestUser methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 13:05'!testFindFollower	self assert: ((u1 followings) size) equals:0.	u1 addFollowing: u2.	self assert: ((u1 followings) size) equals:1.	self assert: (u1 findFollowing: u2) equals:  true.	self assert: (u1 findFollowing: u3) equals:  false.! !!TestUser methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 16:42'!testUserAddFollower	self assert: u1 followings size equals: 0.	u1 addFollowing: u2.	u1 addFollowing: u3.	self assert: u1 followings size equals: 2.	self assert: (u1 findFollowing: u2) equals: true! !!TestUser methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 15:26'!testScore	| a1 |	self assert: u1 score equals: 0.	self addQuestion2.	self assert: u1 score equals: 20.	Answer newAnswerfor: question1 withContent: 'anContent' withCreator: u1.	self assert: u1 score equals: 20.	a1 := Answer newAnswerfor: question2 withContent: 'anContent' withCreator: u1.	self assert: u1 score equals: 70.	a1 like: u2.	self assert: u1 score equals: 71.	a1 disLike: u2.	self assert: u1 score equals: 69.	question1 like: u2.	self assert: u1 score equals: 70.	question1 disLike: u2.	self assert: u1 score equals: 68.! !!TestUser methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 16:40'!testQuestionsOfInterest	self addQuestion.		self assert: u2 questionsOfInterest size equals: 0.	u2 addToTopicsOfInterest: aTopicCollection second.	self assert: u2 questionsOfInterest size equals: 1.	self assert: (u2 questionsOfInterest includes: question1).	u2 addFollowing: u1.	self assert: u2 questionsOfInterest size equals: 2.	self assert: (u2 questionsOfInterest includes: question3).	u2 addToTopicsOfInterest: aTopicCollection2 second.	self assert: u2 questionsOfInterest size equals: 3.	self assert: (u2 questionsOfInterest includes: question2).! !!TestUser methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 14:42'!testAddQuestion	self assert: u2 questions size equals: 0.	self addQuestion2.	self assert: u2 questions size equals: 1.	self assert: u2 questions first title equals: 'que es un buen diseño de de objetos?'! !!TestUser methodsFor: 'tests' stamp: 'Diego 5/17/2020 10:23'!testRemoveAnswerself addQuestion2 .self addAnswer.self assert: ((u3 answers) size) equals: 1.u3 removeAnswer: ans2.self assert: ((u3 answers) size) equals: 0.! !!TestUser methodsFor: 'tests' stamp: 'Diego 5/17/2020 10:04'!sumScore  	question1 like:u2.	question1 like:u3.	question2 disLike: u1.	question2 disLike: u3.		! !!TestUser methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 13:06'!testUserRemoveFollower	u1 addFollowing: u2.	u1 addFollowing: u3.	self assert: u1 followings size equals: 2.	u1 removeFollowing: u2.	self assert: u1 followings size equals: 1.	self assert: (u1 findFollowing: u2) equals: false! !!TestUser methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 14:42'!testAddAnswers	self addQuestion2.	self assert: u3 answers size equals: 0.	self addAnswer.	self assert: u3 answers size equals: 1.	self assert: u3 answers first content equals: 'Sirve para instanciar.'! !!TestUser methodsFor: 'tests' stamp: 'Diego 5/15/2020 11:24'!addAnswer	 ans1:=Answer		newAnswerfor: question1		withContent:			'Sirve para instanciar los objetos queson evaluados por el test en un unico metodo y que seejecute siempre antes de cada test.'		withCreator: u2. 		ans2:= Answer		newAnswerfor: question1		withContent:			'Sirve para instanciar.'		withCreator: u3. 			ans3:=Answer		newAnswerfor: question2		withContent:			'Se debe utulizar......'		withCreator: u1.	! !!TestUser methodsFor: 'tests' stamp: 'Diego 5/17/2020 10:24'!testRemoveQuestions self addQuestion3 .self assert: ((u2 questions) size) equals: 2.u2 removeQuestion: question2.self assert: ((u2 questions) size) equals: 1.self assert: ((u2 questions) last title ) equals: 'como refactorizar?'.! !!TestUser methodsFor: 'tests' stamp: 'Diego 5/15/2020 12:10'!addTopicosself addQuestion.u1 addToTopicsOfInterest: cuora topics first .u2 addToTopicsOfInterest: cuora topics first .u2 addToTopicsOfInterest: cuora topics second .	! !!TestUser methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 16:38'!addQuestion	cuora := CuOOra new.	aTopicCollection := OrderedCollection new.	aTopicCollection add: 'OO1'.	aTopicCollection add: 'Test de unidad'.	question1 := cuora		addQuestionWithTitle: 'Para que sirve el metodo SetUp?'		withContent: 'anContent'		withTopics: aTopicCollection		withCreator: u1.	aTopicCollection := cuora addTopicsOfNewQuestion: aTopicCollection.	aTopicCollection2 := OrderedCollection new.	aTopicCollection2 add: 'OO1'.	aTopicCollection2 add: 'Smalltalk'.	question2 := cuora		addQuestionWithTitle: 'Que significa #messageNotUnderstood?'		withContent: 'anContent'		withTopics: aTopicCollection2		withCreator: u2.	aTopicCollection2 := cuora addTopicsOfNewQuestion: aTopicCollection2.	topicCollect := OrderedCollection new.	topicCollect add: 'Objet'.	topicCollect add: 'OO2'.	question3 := cuora		addQuestionWithTitle: 'que es un buen diseño de de objetos?'		withContent: 'anContent'		withTopics: topicCollect		withCreator: u1! !!TestUser methodsFor: 'tests' stamp: 'juanmassucco 5/17/2020 14:38'!addQuestion3  self addTopicos2.	question1  := Question		newQuestionWithTitle: 'Para que sirve el metodo SetUp?'		withContent: 'anContent'		withTopics: aTopicCollection		withCreator: u1.	self addTopicos3.		question2  := Question		newQuestionWithTitle: 'que es un buen diseño de de objetos?'		withContent: 'anContent'		withTopics: aTopicCollection2		withCreator: u2.			Question		newQuestionWithTitle: 'como refactorizar?'		withContent: 'anContent'		withTopics: aTopicCollection2		withCreator: u2.! !!TestUser methodsFor: 'setup' stamp: 'Diego 5/13/2020 17:03'!setUp	u1:=User newUserNick: 'diego' withMail:'diego@cuoora.com'  withPassword:'1234'.	u2:=User newUserNick: 'juan' withMail:'juan@cuoora.com'  withPassword:'4321'.	u3:=User newUserNick: 'pepe' withMail:'pepe@cuoora.com'  withPassword:'4321'.! !WAComponent subclass: #CuOOraComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Component'!!CuOOraComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	cuoora:		<Object>	user:		<Object>    Implementation Points!!CuOOraComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/15/2019 15:33'!renderContentOn: html	html div		class: 'root';		with: [ html				heading: 'Welcome to CuOOra';					tableData: [ html anchor						callback: [ self loginComponent  ];						with: 'sign in to CuOOra' ];				break.].								! !!CuOOraComponent methodsFor: 'as yet unclassified' stamp: 'juanmassucco 4/15/2019 14:50'!applicationName  ^ 'CuOOra'! !!CuOOraComponent methodsFor: 'initialization' stamp: 'juanmassucco 5/17/2020 12:59'!initialize	super initialize.! !!CuOOraComponent methodsFor: 'actions - utility' stamp: 'juanmassucco 5/17/2020 13:00'!addQuestionComponent	self call: CuOOraAddQuestionComponent newAddQuestionComponent! !!CuOOraComponent methodsFor: 'actions - utility' stamp: 'juanmassucco 5/17/2020 13:00'!homeComponent	self call: CuOOraMainComponent newMainComponent! !!CuOOraComponent methodsFor: 'actions - utility' stamp: 'juanmassucco 5/17/2020 13:00'!loginComponent	self call: CuOOraLoginComponent newloginComponent! !!CuOOraComponent methodsFor: 'actions - utility' stamp: 'juanmassucco 5/17/2020 13:00'!questionDetailComponent: anQuestion	self call: (CuOOraDetailQuestionComponent newDetailQuestionComponent: anQuestion)! !!CuOOraComponent methodsFor: 'actions - utility' stamp: 'juanmassucco 5/17/2020 13:00'!userDetailComponent: anUser	self call: (CuOOraUserDetailQuestionComponent newUserDetailComponent: anUser)! !!CuOOraComponent methodsFor: 'accessing' stamp: 'juanmassucco 5/17/2020 13:01'!cuoora	^ CuOOra soleInstance! !!CuOOraComponent methodsFor: 'accessing' stamp: 'juanmassucco 5/9/2020 19:44'!user^self session user.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOraComponent class	instanceVariableNames: ''!!CuOOraComponent class methodsFor: 'initialization' stamp: 'juanmassucco 5/9/2020 19:37'!initialize	| application |	super initialize.application := WAAdmin register: CuOOraComponent  asApplicationAt: 'cuoora'.application sessionClass: CuOOraSession .! !!CuOOraComponent class methodsFor: 'testing' stamp: 'juanmassucco 4/15/2019 15:04'!canBeRoot	^ true! !CuOOraComponent subclass: #CuOOraLoginComponent	instanceVariableNames: 'tempMail tempPassword'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Component'!!CuOOraLoginComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	cuoora:		<Object>	user:		<Object>    Implementation Points!!CuOOraLoginComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/13/2019 16:23'!renderPasswordInputOn: html html passwordInput  on: #tempPassword of: self;  value: ''.! !!CuOOraLoginComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/15/2019 16:34'!renderContentOn: html	html div 	class: 'generic'; 		with: [		html 			heading: self applicationName;   			text: 'Please login with e-mail and password:';   				form: [    			self     				renderMailInputOn: html;     				renderPasswordInputOn: html;     				renderLoginButtonOn: html]].! !!CuOOraLoginComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/13/2019 15:56'!renderLoginButtonOn: html html submitButton  callback: [self validateLogin];  text: 'Login'.! !!CuOOraLoginComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/9/2020 19:47'!validateLogin	| user |	user := self cuoora userValidation: tempMail password: tempPassword.	user		ifNotNil: [ self session logIn: user.			self homeComponent ]		ifNil: [ self loginComponent ]! !!CuOOraLoginComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/15/2019 16:32'!renderMailInputOn: html	html textInput		on: #tempMail of: self;		value: ''.	html space! !!CuOOraLoginComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 16:04'!tempPassword	^ tempPassword! !!CuOOraLoginComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/15/2019 16:33'!tempMail: anObject	tempMail := anObject! !!CuOOraLoginComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 16:04'!tempPassword: anObject	tempPassword := anObject! !!CuOOraLoginComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/15/2019 16:33'!tempMail	^ tempMail! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOraLoginComponent class	instanceVariableNames: ''!!CuOOraLoginComponent class methodsFor: 'as yet unclassified' stamp: 'juanmassucco 5/17/2020 13:00'!newloginComponent	^ self new! !CuOOraComponent subclass: #CuOOraMainComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Component'!!CuOOraMainComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!CuOOraMainComponent methodsFor: 'buttons' stamp: 'juanmassucco 5/7/2020 19:20'!renderLikeOn: html withQuestion: anQuestionAnswer	html paragraph		with: [ html anchor				callback: [ anQuestionAnswer like: self user];				with: [ html text: 'Like' ] ]! !!CuOOraMainComponent methodsFor: 'buttons' stamp: 'juanmassucco 5/7/2020 19:20'!renderDisLikeOn: html withQuestion: anQuestionAnswer	html paragraph		with: [ html anchor				callback: [ anQuestionAnswer disLike: self user];				with: [ html text: 'Dislike' ] ]! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/7/2020 10:07'!renderQuestionTitle: anQuestion whit: html	html heading		level: 2;		with: anQuestion title		! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/13/2020 21:01'!renderQuestionUser: anQuestion whit: html	anQuestion creator nick = self user nick		ifTrue: [ html text: 'Realizada por: Mi ' , anQuestion creator score printString , 'Puntos' ]		ifFalse: [ html				text: 'Realizada por:  ';				tableData: [ html anchor						callback: [ self userDetailComponent: (anQuestion creator) ];						with: anQuestion creator nick ].			html text: anQuestion creator score printString , 'Puntos' ]! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/9/2020 19:48'!renderUserQuestions: html	html		tableData: [ html anchor				callback: [ self userDetailComponent: self user ];				with: self user nick ]! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/11/2020 19:53'!renderLogin: html	html tableData: [ html anchor				callback: [ self loginComponent ];				with: 'log out     '  ].! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/14/2020 16:03'!renderDetailQuestion: anQuestion whit: html	html		tableData: [ html anchor				callback: [ self questionDetailComponent: anQuestion ];				with: 'Detalle' ].	html break.! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/11/2020 19:53'!renderContentOn: html	html div		class: 'Home';		with: [ html heading: self applicationName.			self				renderLogin: html;				renderUserQuestions: html.			html				break;				tableData: [ html anchor						callback: [ self addQuestionComponent ];						with: 'Agregar pregunta' ];				break;				text: 'Ultimas preguntas:'.			self renderQuestions: html ]! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/13/2020 21:21'!renderQuestions: html	^(self cuoora returnQuestionsOfInterestForHome: self user cant:5)		do: [ :n | self renderQuestion: n whit: html ]! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/14/2019 21:34'!renderAnswerCant: anQuestion whit: html	html		text: '   |  ' , anQuestion answers size printString , '       respuestas';		break! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/7/2020 13:46'!renderQuestion: anQuestion whit: html	self		renderQuestionHead: anQuestion whit: html;		renderDetailQuestion: anQuestion whit: html;		renderQuestionBody: anQuestion whit: html.! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'AmonAscaso 5/12/2019 13:30'!renderQuestionTopics: aQuestion whit: html	html text: 'topicos:  '.	html text:( ', ' join: (aQuestion topics collect: [:each | each name])).	html break.! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/7/2020 13:46'!renderQuestionBody: anQuestion whit: html	self		renderQuestionTopics: anQuestion whit: html;		renderQuestionUser: anQuestion whit: html;		renderAnswerCant: anQuestion whit: html;		renderQuestionLikes: anQuestion whit: html;		renderLikeOn: html withQuestion: anQuestion;		renderDisLikeOn: html withQuestion: anQuestion.	html		text: '------------------------------------------------------------------------------------------------------'.! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/7/2020 10:08'!renderQuestionHead: anQuestion whit: html	self		renderQuestionTitle: anQuestion whit: html! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/13/2020 10:27'!renderQuestionLikes: anQuestion whit: html	html		text: ' Likes: ' , anQuestion amountOfLikes printString;		text: ' Dislikes: ' , anQuestion amountOfDisLikes printString;		break! !!CuOOraMainComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/15/2019 12:08'!renderHomeOn: html	html paragraph		with: [ html anchor				callback: [ self homeComponent ];				with: [ html text: 'Home' ] ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOraMainComponent class	instanceVariableNames: ''!!CuOOraMainComponent class methodsFor: 'instance creation' stamp: 'juanmassucco 5/17/2020 12:59'!newMainComponent	^self new ! !CuOOraMainComponent subclass: #CuOOraAddQuestionComponent	instanceVariableNames: 'antitle andescription antopics'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Component'!!CuOOraAddQuestionComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!CuOOraAddQuestionComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/14/2019 16:12'!renderTitleInputOn: html	html		tableData: [ html text: 'Titulo: ' ];		tableData: [ html textInput on: #antitle of: self ]! !!CuOOraAddQuestionComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/14/2019 16:25'!renderDescriptionInputOn: html	html		tableData: [ html text: 'Description:' ];		tableData: [ html textInput on: #andescription of: self ]! !!CuOOraAddQuestionComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/14/2019 16:13'!renderTopicsInputOn: html	html		tableData: [ html text: 'topicos:' ];		tableData: [ html textInput on: #antopics of: self ]! !!CuOOraAddQuestionComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/9/2020 19:48'!renderContentOn: html	html div		class: 'create';		with: [ html				heading: self applicationName;				break.			self				renderLogin: html;				renderHomeOn: html.			html				break;				heading: 'Realizando pregunta'.			html				form: [ html						table: [ html								tableRow: [ self renderTitleInputOn: html ];								tableRow: [ self renderDescriptionInputOn: html ];								tableRow: [ self renderTopicsInputOn: html ];								tableRow: [ html										tableData;										tableData: [ html submitButton												callback: [ self cuoora														addQuestionWithTitle: antitle														withContent: andescription														withTopics: (self splitTopics: antopics)														withCreator: self user.													self answer: true ];												value: 'Save'.											html submitButton												callback: [ self answer: false ];												value: 'Cancel' ] ] ] ] ]! !!CuOOraAddQuestionComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/14/2019 16:11'!antitle	^ antitle! !!CuOOraAddQuestionComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/14/2019 16:11'!andescription: anObject	andescription := anObject! !!CuOOraAddQuestionComponent methodsFor: 'accessing' stamp: 'juanmassucco 5/7/2020 14:05'!splitTopics: aString	| topicos |	topicos := OrderedCollection new.	(aString splitOn: ',') do: [ :a | topicos add: a ].	^ topicos! !!CuOOraAddQuestionComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/14/2019 16:11'!antopics	^ antopics! !!CuOOraAddQuestionComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/14/2019 16:11'!antitle: anObject	antitle := anObject! !!CuOOraAddQuestionComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/14/2019 16:11'!antopics: anObject	antopics := anObject! !!CuOOraAddQuestionComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/14/2019 16:11'!andescription	^ andescription! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOraAddQuestionComponent class	instanceVariableNames: ''!!CuOOraAddQuestionComponent class methodsFor: 'instance creation' stamp: 'juanmassucco 5/17/2020 13:00'!newAddQuestionComponent	^ self new! !CuOOraMainComponent subclass: #CuOOraDetailQuestionComponent	instanceVariableNames: 'theQuestion'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Component'!!CuOOraDetailQuestionComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!CuOOraDetailQuestionComponent methodsFor: 'actions - utility' stamp: 'juanmassucco 5/17/2020 13:01'!addAnswerComponent: anQuestion	self call: (CuOOraAddAnswerComponent newAddAnswerComponent: theQuestion)! !!CuOOraDetailQuestionComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/14/2019 14:55'!theQuestion	^ theQuestion! !!CuOOraDetailQuestionComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/14/2019 14:55'!theQuestion: anObject	theQuestion := anObject! !!CuOOraDetailQuestionComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/13/2020 08:59'!renderAnswer: anAnswer with: html	html		break;		break.	self renderQuestionUser: anAnswer whit: html.	html		break;		text: 'score' , anAnswer score printString;		break;		break;		text: anAnswer content;		break.	self		renderQuestionLikes: anAnswer whit: html;		renderLikeOn: html withQuestion: anAnswer;		renderDisLikeOn: html withQuestion: anAnswer.	html		text:			'------------------------------------------------------------------------------------------------------';		break! !!CuOOraDetailQuestionComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/12/2019 10:56'!renderContentOn: html	html div		class: 'detail';		with: [ html heading: self applicationName.			self renderLogin: html;			renderHomeOn: html.			self				renderQuestion: self theQuestion whit: html;				renderAnswers: html;				renderAddAnswers: html ]! !!CuOOraDetailQuestionComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/15/2019 09:26'!renderQuestionDescription: html		html text: 'descripcion:  ' , theQuestion content;		break.		! !!CuOOraDetailQuestionComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/7/2020 13:46'!renderQuestion: anQuestion whit: html	self		renderQuestionHead: anQuestion whit: html;		renderQuestionDescription: html;		renderQuestionBody: anQuestion whit: html.	html		break! !!CuOOraDetailQuestionComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/7/2020 13:53'!renderAnswers: html	self theQuestion answersOrderedByScore do: [ :a | self renderAnswer: a with: html ]! !!CuOOraDetailQuestionComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/12/2019 10:56'!renderAddAnswers:html	html tableData: [ html anchor						callback: [ self addAnswerComponent: self theQuestion ];						with: 'Responder' ];						break.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOraDetailQuestionComponent class	instanceVariableNames: ''!!CuOOraDetailQuestionComponent class methodsFor: 'instance creation' stamp: 'juanmassucco 5/17/2020 13:00'!newDetailQuestionComponent: anQuestion	^ self new theQuestion: anQuestion! !CuOOraDetailQuestionComponent subclass: #CuOOraAddAnswerComponent	instanceVariableNames: 'content'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Component'!!CuOOraAddAnswerComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!CuOOraAddAnswerComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/14/2019 16:40'!content	^ content! !!CuOOraAddAnswerComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/14/2019 16:40'!content: anObject	content := anObject! !!CuOOraAddAnswerComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/14/2019 16:46'!renderDescriptionInputOn: html	html		tableData: [ html text: 'Respuesta:' ];		tableData: [ html textInput on: #content of: self ]! !!CuOOraAddAnswerComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/9/2020 19:49'!renderContentOn: html	html div		class: 'create';		with: [ html heading: self applicationName.			self				renderLogin: html;				renderQuestion: self theQuestion whit: html.			html heading: 'Responder'.			html				form: [ html						table: [ html								tableRow: [ self renderContentInputOn: html ];								tableRow: [ html										tableData;										tableData: [ html submitButton												callback: [ Answer newAnswerfor: self theQuestion withContent: self content withCreator: self user.													self answer: true ];												value: 'Save'.											html submitButton												callback: [ self answer: false ];												value: 'Cancel' ] ] ] ] ]! !!CuOOraAddAnswerComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/15/2019 11:51'!rendercontntonInputOn: html	html		tableData: [ html text: 'Respuesta:' ];		tableData: [ html textInput on: #content of: self ]! !!CuOOraAddAnswerComponent methodsFor: 'rendering' stamp: 'juanmassucco 4/14/2019 16:46'!renderContentInputOn: html	html		tableData: [ html text: 'Respuesta:' ];		tableData: [ html textInput on: #content of: self ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOraAddAnswerComponent class	instanceVariableNames: ''!!CuOOraAddAnswerComponent class methodsFor: 'instance creation' stamp: 'juanmassucco 5/17/2020 13:00'!newAddAnswerComponent: anQuestion	^ self new theQuestion: anQuestion! !WASession subclass: #CuOOraSession	instanceVariableNames: 'user'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Component'!!CuOOraSession commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	user:		<Object>    Implementation Points!!CuOOraSession methodsFor: 'accessing' stamp: 'juanmassucco 5/9/2020 19:20'!logOut	self user: nil! !!CuOOraSession methodsFor: 'accessing' stamp: 'juanmassucco 5/9/2020 19:19'!user: anObject	user := anObject! !!CuOOraSession methodsFor: 'accessing' stamp: 'juanmassucco 5/9/2020 19:19'!user	^ user! !!CuOOraSession methodsFor: 'accessing' stamp: 'juanmassucco 5/9/2020 19:21'!logIn: anUser	self user: anUser! !CuOOraMainComponent subclass: #CuOOraUserDetailQuestionComponent	instanceVariableNames: 'userDetail'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Component'!!CuOOraUserDetailQuestionComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	userDetail:		<Object>    Implementation Points!!CuOOraUserDetailQuestionComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/17/2020 12:56'!rendeFollowUser: html	self userDetail nick = self user nick		ifFalse: [ (self user findFollowing: self userDetail)				ifTrue: [ html						tableData: [ html anchor								callback: [ self user removeFollowing: self userDetail ];								with: 'Unfollow' ] ]				ifFalse: [ html						tableData: [ html anchor								callback: [ self user addFollowing: self userDetail ];								with: 'Follow' ] ] ]! !!CuOOraUserDetailQuestionComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/12/2019 10:55'!renderContentOn: html	html div		class: 'detalle de usuario';		with: [ html heading: self applicationName.			self				renderLogin: html;				renderHomeOn: html.			html break.			html text: self userDetail nick.			self				rendeFollowUser: html;				renderQuestions: html ]! !!CuOOraUserDetailQuestionComponent methodsFor: 'rendering' stamp: 'juanmassucco 5/7/2020 10:24'!renderQuestions: html	self userDetail questions do: [ :n | self renderQuestion: n whit: html ]! !!CuOOraUserDetailQuestionComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/14/2019 20:49'!userDetail: anObject	userDetail := anObject! !!CuOOraUserDetailQuestionComponent methodsFor: 'accessing' stamp: 'juanmassucco 4/14/2019 20:49'!userDetail	^ userDetail! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOraUserDetailQuestionComponent class	instanceVariableNames: ''!!CuOOraUserDetailQuestionComponent class methodsFor: 'initialization' stamp: 'juanmassucco 5/17/2020 13:00'!newUserDetailComponent: anOtherUser	^ self new userDetail: anOtherUser! !CuOOraComponent initialize!Object subclass: #CuOOra	instanceVariableNames: 'users topics'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra'!!CuOOra commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	topics:		<Object>	users:		<Object>    Implementation Points!!CuOOra methodsFor: 'initialization' stamp: 'juanmassucco 5/8/2020 09:57'!initialize	topics := OrderedCollection new.	users := OrderedCollection new.	! !!CuOOra methodsFor: 'adding' stamp: 'juanmassucco 5/15/2020 09:59'!addToTopics: anTopic^self topics add: anTopic! !!CuOOra methodsFor: 'adding' stamp: 'juanmassucco 4/13/2019 15:12'!addUser: anUser	users add: anUser.! !!CuOOra methodsFor: 'private' stamp: 'juanmassucco 5/12/2019 10:56'!findUserByMail: anMail ^self users detect:[:a|a  mail = anMail ] ifNone: nil! !!CuOOra methodsFor: 'private' stamp: 'juanmassucco 5/13/2020 09:33'!setup	| question1 question2 topicCollect uno dos tres |	uno := User newUserNick: 'Pedro' withMail: 'pedro@cuoora.com' withPassword: 'pedro@cuoora.com'.	dos := User newUserNick: 'Diego' withMail: 'diego@cuoora.com' withPassword: 'diego@cuoora.com'.	tres := User newUserNick: 'Juan' withMail: 'juan@cuoora.com' withPassword: 'juan@cuoora.com'.	users add: uno.	users add: dos.	users add: tres.		topicCollect := OrderedCollection new.	topicCollect add: 'OO1' .	topicCollect add: 'Test de unidad'.		question1 := self		addQuestionWithTitle: 'Para que sirve el metodo SetUp?'		withContent: 'anContent'		withTopics: topicCollect		withCreator: uno.	Answer		newAnswerfor: question1		withContent:			'Sirve para instanciar los objetos queson evaluados por el test en un unico metodo y que seejecute siempre antes de cada test.'		withCreator: dos.			topicCollect := OrderedCollection new.	topicCollect add: 'OO1'.	topicCollect add: 'Smalltalk'.		question2 := self		addQuestionWithTitle: 'Que significa #messageNotUnderstood?'		withContent: 'anContent'		withTopics: topicCollect		withCreator: dos.	Answer		newAnswerfor: question2		withContent:			'Significa que el objeto que recibio elmensaje no encontro ningun metodo para ejecutar enrespuesta.'		withCreator: uno.			uno addToTopicsOfInterest:  (self findTopicByName: 'OO1').	uno addToTopicsOfInterest: (self findTopicByName: 'Test de unidad').	dos addToTopicsOfInterest: (self findTopicByName: 'OO1').	tres addToTopicsOfInterest: (self findTopicByName: 'Smalltalk')! !!CuOOra methodsFor: 'private' stamp: 'juanmassucco 5/13/2020 21:45'!addTopicsOfNewQuestion: anTopics	^ anTopics		collect: [ :a | 			self topics				detect: [ :b | b name = a ]				ifNone: [ self addToTopics: (Topic newTopicWithName: a withDescription: 'aDescription ') ] ]! !!CuOOra methodsFor: 'private' stamp: 'juanmassucco 5/15/2020 10:00'!findTopicByName: anName ^self topics detect:[:a|a  name = anName ] ifNone: nil! !!CuOOra methodsFor: 'public' stamp: 'juanmassucco 4/15/2019 16:36'!userValidation: anMail password: anPassword	| me |	me := self findUserByMail:  anMail.	me ifNil: [ ^ nil ].	me password = anPassword		ifTrue: [ ^ me ].	^ nil! !!CuOOra methodsFor: 'public' stamp: 'juanmassucco 5/15/2020 09:59'!addQuestionWithTitle: anTitle withContent: anDescription withTopics: anTopics withCreator: anUser	^ Question		newQuestionWithTitle: anTitle		withContent: anDescription		withTopics: (self addTopicsOfNewQuestion: anTopics)		withCreator: anUser! !!CuOOra methodsFor: 'public' stamp: 'juanmassucco 5/15/2020 10:00'!returnQuestionsOfInterestForHome: anUser cant: anCant	^ (anUser questionsOfInterest asSortedCollection: [ :a :b | a creation > b creation ]) takeFirst: anCant! !!CuOOra methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:00'!topics: anTopics	topics := anTopics! !!CuOOra methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 14:46'!users	^ users! !!CuOOra methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:01'!users: anUsers	users := anUsers! !!CuOOra methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 14:46'!topics	^ topics! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOra class	instanceVariableNames: 'soleInstance'!!CuOOra class methodsFor: 'instanceCreation' stamp: 'juanmassucco 5/13/2020 11:10'!soleInstance	soleInstance		ifNil: [ soleInstance := self new.			soleInstance setup ].	^ soleInstance! !!CuOOra class methodsFor: 'instanceCreation' stamp: 'juanmassucco 5/13/2020 11:08'!clearSoleInstance	soleInstance:= nil! !Object subclass: #Post	instanceVariableNames: 'content creator creation valorations'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra'!!Post commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	content:		<Object>	creation:		<Object>	creator:		<Object>	disLikes:		<Object>	likes:		<Object>    Implementation Points!!Post methodsFor: 'initialization' stamp: 'AmonAscaso 5/8/2019 16:55'!initialize self valorations: OrderedCollection new ; creation: DateAndTime now.! !!Post methodsFor: 'private' stamp: 'juanmassucco 5/13/2020 10:27'!previusValoration: anUser	^ self valorations detect: [ :val | val creator = anUser ] ifNone: nil! !!Post methodsFor: 'public' stamp: 'juanmassucco 5/14/2020 14:31'!like: anUser	(self previusValoration: anUser)		ifNil: [ self addValoration: (Valoration newValoration: true withCreator: anUser) ]		ifNotNil: [ (self previusValoration: anUser) valoration: true ]! !!Post methodsFor: 'public' stamp: 'juanmassucco 5/13/2020 10:27'!amountOfDisLikes	^ (self valorations select: [ :a | a valoration not ]) size! !!Post methodsFor: 'public' stamp: 'juanmassucco 5/13/2020 10:27'!amountOfLikes	^ (self valorations select: [ :a | a valoration ]) size! !!Post methodsFor: 'public' stamp: 'juanmassucco 5/13/2020 10:27'!score^(self amountOfLikes - self amountOfDisLikes)! !!Post methodsFor: 'public' stamp: 'juanmassucco 5/14/2020 14:31'!disLike: anUser	(self previusValoration: anUser)		ifNil: [ self addValoration: (Valoration newValoration: false withCreator: anUser) ]		ifNotNil: [ (self previusValoration: anUser) valoration: false ]! !!Post methodsFor: 'accessing' stamp: 'AmonAscaso 5/8/2019 16:54'!valorations	^ valorations! !!Post methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 14:34'!creator: anObject	creator := anObject! !!Post methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:03'!valorations: anValorations	valorations := anValorations! !!Post methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 14:12'!content	^ content! !!Post methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:01'!content: anContent	content := anContent! !!Post methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 14:34'!creator	^ creator! !!Post methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 14:12'!creation	^ creation! !!Post methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:02'!creation: anDate	creation := anDate! !!Post methodsFor: 'add/remove' stamp: 'juanmassucco 5/15/2020 10:03'!removeValoration: anValoration	self valorations remove: anValoration! !!Post methodsFor: 'add/remove' stamp: 'juanmassucco 5/12/2019 19:34'!removeself subclassResponsibility.! !!Post methodsFor: 'add/remove' stamp: 'juanmassucco 5/15/2020 10:01'!addValoration: anValoration	self valorations add: anValoration! !Post subclass: #Answer	instanceVariableNames: 'question'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra'!!Answer commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	question:		<Object>    Implementation Points!!Answer methodsFor: 'remove' stamp: 'juanmassucco 5/13/2020 09:19'!remove	self creator removeAnswer: self.	self valorations do:[:a|a remove].	self question removeAnswer: self.	! !!Answer methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:03'!question: anQuestion	question := anQuestion! !!Answer methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 14:16'!question	^ question! !!Answer methodsFor: 'initialization' stamp: 'juanmassucco 5/6/2020 16:40'!answerfor: anQuestion withContent: anContent withCreator: anCreator	self question: anQuestion;	content: anContent;	creator: anCreator.	self creator addAnswer: self.	self question addAnswers: self.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Answer class	instanceVariableNames: ''!!Answer class methodsFor: 'instance creation' stamp: 'juanmassucco 5/12/2019 10:56'!newAnswerfor: anQuestion withContent: anContent withCreator: anCreator	^ self new answerfor: anQuestion withContent: anContent withCreator: anCreator! !Post subclass: #Question	instanceVariableNames: 'title answers topics'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra'!!Question commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	answers:		<Object>	title:		<Object>	topics:		<Object>    Implementation Points!!Question methodsFor: 'initialization' stamp: 'juanmassucco 4/13/2019 20:41'!initialize	super initialize .	self answers: OrderedCollection new .! !!Question methodsFor: 'initialization' stamp: 'juanmassucco 5/15/2020 10:05'!questionWithTitle: anTitle withContent: anContent withTopics: anTopics withCreator: anUser	self		title: anTitle;		content: anContent;		topics: anTopics;		creator: anUser.	self creator addQuestion: self.	self topics do:[:a|a questionAdd:self ]	! !!Question methodsFor: 'public' stamp: 'juanmassucco 5/13/2020 08:59'!answersOrderedByScore	^ answers  asSortedCollection:[ :a :b | a score >  b score ]! !!Question methodsFor: 'add/remove' stamp: 'juanmassucco 5/15/2020 10:03'!addAnswers: anAnswer	answers add: anAnswer! !!Question methodsFor: 'add/remove' stamp: 'juanmassucco 5/17/2020 13:35'!remove	self answers do: [ :a | a remove ].	self creator removeQuestion: self.	self valorations do: [ :a | a remove ].	self topics do: [ :b | b questionRemove: self ]! !!Question methodsFor: 'add/remove' stamp: 'juanmassucco 5/9/2020 14:03'!removeAnswer: anAnswer	answers remove:anAnswer! !!Question methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:05'!answers: anAnswers	answers := anAnswers! !!Question methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 14:13'!topics	^ topics! !!Question methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:06'!title: anTitle	title := anTitle! !!Question methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:06'!topics: anTopics	topics := anTopics! !!Question methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 14:13'!title	^ title! !!Question methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 14:13'!answers	^ answers! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Question class	instanceVariableNames: ''!!Question class methodsFor: 'instance creation' stamp: 'juanmassucco 5/12/2019 10:56'!newQuestionWithTitle: anTitle withContent: anContent withTopics: anTopics withCreator: anCreator	^ self new		questionWithTitle: anTitle		withContent: anContent		withTopics: anTopics		withCreator: anCreator! !Object subclass: #Topic	instanceVariableNames: 'name questions description'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra'!!Topic commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	name:		<Object>    Implementation Points!!Topic methodsFor: 'adding' stamp: 'juanmassucco 5/15/2020 10:07'!questionRemove: anQuestionquestions remove: anQuestion! !!Topic methodsFor: 'adding' stamp: 'juanmassucco 5/15/2020 10:07'!questionAdd: anQuestionquestions add: anQuestion! !!Topic methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:07'!description: anDescription	description := anDescription! !!Topic methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:07'!name: anName	name := anName! !!Topic methodsFor: 'accessing' stamp: 'juanmassucco 5/12/2019 10:56'!name	^ name! !!Topic methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:08'!questions: anQuestion	questions := anQuestion! !!Topic methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 14:59'!description	^ description! !!Topic methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 14:56'!questions	^ questions! !!Topic methodsFor: 'initialization' stamp: 'juanmassucco 4/13/2019 20:40'!initialize self questions: OrderedCollection new .! !!Topic methodsFor: 'initialization' stamp: 'juanmassucco 5/15/2020 10:08'!topicWithName: anName withDescription: anDescription	self name: anName ;	description: anDescription .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topic class	instanceVariableNames: ''!!Topic class methodsFor: 'instance creation' stamp: 'juanmassucco 5/12/2019 10:56'!newTopicWithName: aName withDescription: aDescription	^ self new topicWithName: aName withDescription: aDescription! !Object subclass: #User	instanceVariableNames: 'nick mail password creation followings topicsOfInterest questions answers'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra'!!User commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	creation:		<Object>	followers:		<Object>	nick:		<Object>	password:		<Object>	questionAnswer:		<Object>	topics:		<Object>    Implementation Points!!User methodsFor: 'public' stamp: 'juanmassucco 5/15/2020 19:19'!findFollowing: anUser	^ self followings includes: anUser! !!User methodsFor: 'public' stamp: 'juanmassucco 5/15/2020 19:21'!questionsOfInterest	^ ((topicsOfInterest flatCollect: [ :topic | topic questions ]) union: (followings flatCollect: [ :miFollows | miFollows questions ]))asSet! !!User methodsFor: 'public' stamp: 'juanmassucco 5/13/2020 09:00'!score	^ self answersScore + self questionsScore! !!User methodsFor: 'add/remove' stamp: 'juanmassucco 5/15/2020 19:19'!removeFollowing: anUser self followings remove: anUser .! !!User methodsFor: 'add/remove' stamp: 'juanmassucco 5/6/2020 16:35'!removeQuestion: anQuestion	self questions remove: anQuestion! !!User methodsFor: 'add/remove' stamp: 'Diego 5/8/2020 18:03'!removeAnswer: anAnswer	self answers remove: anAnswer! !!User methodsFor: 'add/remove' stamp: 'juanmassucco 5/6/2020 16:36'!addQuestion: anQuestion	self questions add: anQuestion! !!User methodsFor: 'add/remove' stamp: 'juanmassucco 5/15/2020 10:08'!addToTopicsOfInterest: anTopic	self topicsOfInterest add: anTopic! !!User methodsFor: 'add/remove' stamp: 'juanmassucco 5/6/2020 16:37'!addAnswer: anAnswer	self answers add: anAnswer! !!User methodsFor: 'add/remove' stamp: 'juanmassucco 5/15/2020 10:09'!removeToTopicsOfInterest: anTopic	self topicsOfInterest remove: anTopic! !!User methodsFor: 'add/remove' stamp: 'juanmassucco 5/17/2020 12:56'!addFollowing: anUser	self followings add: anUser ! !!User methodsFor: 'accessing' stamp: 'juanmassucco 5/7/2020 10:24'!questions	^ questions ! !!User methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 13:58'!creation	^ creation! !!User methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:10'!mail: anMail	mail := anMail! !!User methodsFor: 'accessing' stamp: 'juanmassucco 4/15/2019 16:12'!mail	^ mail! !!User methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 13:58'!nick	^ nick! !!User methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 19:19'!followings: anFollowers	followings := anFollowers! !!User methodsFor: 'accessing' stamp: 'juanmassucco 5/7/2020 10:25'!answers	^ answers! !!User methodsFor: 'accessing' stamp: 'juanmassucco 5/13/2020 08:58'!topicsOfInterest	^ topicsOfInterest! !!User methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:09'!answers: anAnswer	answers := anAnswer! !!User methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:11'!questions: anQuestion	questions := anQuestion! !!User methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 13:58'!password	^ password! !!User methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:11'!password: anPassword	password := anPassword! !!User methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:10'!creation: anDate	creation := anDate! !!User methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:10'!nick: anUser	nick := anUser! !!User methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 19:18'!followings	^ followings! !!User methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:09'!topicsOfInterest: anTopics	topicsOfInterest := anTopics! !!User methodsFor: 'private' stamp: 'juanmassucco 5/14/2020 14:08'!questionsScore	^ (self questions sumNumbers: [ :p | p score ]) + (self questions size * self questionValue)! !!User methodsFor: 'private' stamp: 'juanmassucco 5/17/2020 12:58'!answersScore	| aux |	aux := self answersToQuestionsFromOthers.	^ (aux sumNumbers: [ :p | p score ]) + (aux size * self answerValue)! !!User methodsFor: 'private' stamp: 'juanmassucco 4/14/2020 16:18'!answerValue^50! !!User methodsFor: 'private' stamp: 'juanmassucco 5/17/2020 12:57'!answersToQuestionsFromOthers	^ answers select:[ :a | (questions includes: a question)not]! !!User methodsFor: 'private' stamp: 'juanmassucco 4/14/2020 16:18'!questionValue^20! !!User methodsFor: 'initialization' stamp: 'juanmassucco 4/15/2019 16:23'!userNick: anNick withMail: anMail withPassword: anPassword	self		nick: anNick;		mail: anMail;		password: anPassword! !!User methodsFor: 'initialization' stamp: 'juanmassucco 5/15/2020 19:19'!initializeself answers: OrderedCollection  new; questions: OrderedCollection  new; topicsOfInterest: OrderedCollection new; followings: OrderedCollection  new; creation: DateAndTime now.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: ''!!User class methodsFor: 'instance creation' stamp: 'juanmassucco 4/15/2019 16:14'!newUserNick: anNick withMail: anMail withPassword: anPassword ^self new userNick: anNick withMail: anMail withPassword: anPassword! !Object subclass: #Valoration	instanceVariableNames: 'creator creation valoration'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra'!!Valoration commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	creation:		<Object>	creator:		<Object>	likeDislike:		<Object>	questionAnswer:		<Object>    Implementation Points!!Valoration methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:12'!valoration: anValoration	valoration := anValoration! !!Valoration methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:12'!creator: anUser	creator := anUser! !!Valoration methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 20:13'!creator	^ creator! !!Valoration methodsFor: 'accessing' stamp: 'juanmassucco 4/13/2019 20:13'!creation	^ creation! !!Valoration methodsFor: 'accessing' stamp: 'juanmassucco 5/15/2020 10:11'!creation: anDate	creation := anDate! !!Valoration methodsFor: 'accessing' stamp: 'AmonAscaso 5/8/2019 17:02'!valoration	^ valoration! !!Valoration methodsFor: 'initialize' stamp: 'juanmassucco 5/15/2020 10:12'!valoration: anBolean withCreator: anUser	self		valoration: anBolean;		creator: anUser;		creation: DateAndTime now! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Valoration class	instanceVariableNames: ''!!Valoration class methodsFor: 'instance creation' stamp: 'juanmassucco 5/13/2020 09:10'!newValoration: anBolean withCreator: anCreator	^ self new valoration: anBolean withCreator: anCreator! !